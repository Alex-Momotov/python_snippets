# _____________________________________________________________________________________________
# Environments

# Create env
pipenv install          # If current dir has no Pipfile, creates new virt env and associates it with current dir, generating Pipfile and Pipfile.lock. If current dir has Pipfile, creates new virt env with packages and python ver specified in Pipfile.
    --python <path>     # Use Python installation specified by path.
    --python <ver>      # Use specific version of Python. If such version doesn't exist on the system, you're prompted to install it. Select 'no', and install it with pyenv.
    --ignore-pipfile    # Create virt env using Pipfile.lock instead of Pipfile. Use this option for production. Results in deterministic env build.

# Remove env
pipenv --rm         # Remove virt env assiciated with current dir. Gets removed from ~/.local/share/virtualenvs/. Run 'rm -rf' if dir wasn't removed.

# Activate env
pipenv shell        # Activate environment associated with current directory. If directory does not contain Pipfile and
                    # Pipfile.lock, new environment will be created in current directory in same way as "pipenv install".
pipenv run <cmd>    # Run command from inside env associated with current dir. No need to activate env first.

# _____________________________________________________________________________________________
# Packages

# Packages - list
pipenv graph            # Prints package dependency graph. Under each package name there is a list of its trans packages.
pipenv run pip list     # List packages installed in current virt env.

# Packages - install
pipenv install pkg, pkg1, ..    # Install package(s) to virt env. Adds them to Pipfile and Pipfile.lock.
                                # Alternatively add packages to Pipfile, and run 'pipenv install'.
                --dev           # Install dev packages - those under [dev-packages] in Pipfile.

# Packages - uninstall
pipenv uninstall <pkg> && pipenv clean  # Uninstalls package from virt env, removes it from Pipfile and Pipfile.lock. 'pipenv clean' removes transitive packages that are no longer required.
                                        # Alternatively, remove package from Pipfile, then and run 'pipenv clean'.

# _____________________________________________________________________________________________
# Pipfile

# Pipfile structure
[[source]]                                  # Source where pipenv packages dependencies from. Pipenv can have one or more sources, each labled [[source]].
url = "https://pypi.python.org/simple"
verify_ssl = true
name = "pypi"

[[source]]                                  # Internal company repository of Python packages (example).
url = "https://some.internal.url"
verify_ssl = false
name = "pipinternal"

[packages]                  # Packages and versions required by our project.
requests = "*"              # Any pkg version. Pipenv will download latest, if possible.
requests = "==2.2.1"        # Specific package version.

[dev-packages]              # Packages installed for dev only (such as pytest). Will not be used unless in production (unless --dev flag is passed).
pytest = "*"

[requires]                  # Required python version.
python_version = "3.7"

# Pipfile vs Pipfile.lock
Pipfile         # Meant to be edited by hand. Describes python version, packages required in virt environment, one or more package sources.
                # Used by pipenv as an instruction of how to build env from scratch.
                # Versions are often "*" (latest), resulting in non-deterministic env builds.

Pipfile.lock    # Not meant to be edited manually. Contains exact versions and hashes of packages and transitive packages, enabling pipenv to build virt env deterministically.
                # Package versions and hashes. Transitive package versions and hashes.
                # Package versions are exact, resulting in deterministic virt env builds.

# _____________________________________________________________________________________________
# Tips

# Environment location
# On MacOS virt envs are created in ~/.local/share/virtualenvs/ with name <dir>-<hash> 
# where dir is current project dir and hash is the hash of the full path to that dir.
pipenvs                         	# List pipenv virt envs on the computer. Alias for listing files in ~/.local/share/virtualenvs/.
pipenv --venv                   	# Display dir where environment associated with current dir is located.
pipenv run python --version     	# Show Python version used by current virt env.
ls -la $(pipenv run which python)	# Show Python installation used by current virt env. Look at where sim link points to.

# Change Python version used by virt env
Will need to recreate virt env with a different Python version:
1. change version in Pipfile
2. pipenv --rm
3. pipenv install

# Moving project to different dir OR renaming project dir
- Pipenv virt envs are created under ~/.local/share/virtualenvs/ with the name <dir>-<hash> where <dir> is dir name where virt env was created and <hash> is hash of the full path to that dir.
- If you move project files to another dir, or rename project directory, the current virt env will be orphaned, and doing 'pipenv install' will result in pipenv creating a brand new virt env with a different hash.
- If you want to move project files to different dir: remove current virt env -> move project files OR rename project dir -> create new virt env.

# New project - Pycharm
1. 'pipenv install' in desired project dir or subdir. Use --python <ver> flag if you require specific Python version.
   If your system doesn't have required Python version installed and you're prompted to install it, type 'no' and install it using 'pyenv'.
2. Preferences -> Project Interpreter -> Add -> Virtual Environment -> existing environment ->
   path to interpreter of new virt env '~/.local/share/virtualenvs/<ENVIRONMENT>/bin/python'.

# Pipfile and Pipfile.lock workflow
1. Add, change, remove packages in Pipfile.
2. Test your code.
3. Run 'pipenv lock'. Now that you know tests are passing with those exact package versions, you want to write those in
   Pipfile.lock to ensure a deterministic build of this exact virt env in production.
4. Run 'pipenv install --ignore-pipfile' to create virt env in production. This will use Pipfile.lock and ignore Pipfile,
   resulting in a deterministic virt env.

# _____________________________________________________________________________________________
